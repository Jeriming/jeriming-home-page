{"version":3,"sources":["webpack:///./node_modules/core-js/internals/this-number-value.js","webpack:///./src/components/WaterRipples.vue?154a","webpack:///./node_modules/core-js/modules/es.number.to-fixed.js","webpack:///./src/components/WaterRipples.vue","webpack:///./node_modules/three/examples/jsm/misc/GPUComputationRenderer.js","webpack:///./node_modules/three/examples/jsm/math/SimplexNoise.js","webpack:///./src/glsl/waterVertexShader.js","webpack:///./src/glsl/heightmapFragmentShader.js","webpack:///./src/components/WaterRipples.vue?2c57"],"names":["uncurryThis","module","exports","valueOf","$","global","toIntegerOrInfinity","thisNumberValue","$repeat","fails","RangeError","String","floor","Math","repeat","stringSlice","slice","un$ToFixed","toFixed","pow","x","n","acc","log","x2","multiply","data","c","index","c2","divide","dataToString","s","t","length","FORCED","target","proto","forced","fractionDigits","e","z","j","k","number","this","fractDigits","sign","result","id","_createElementBlock","sizeX","sizeY","renderer","variables","currentTextureIndex","dataType","scene","camera","position","passThruUniforms","passThruTexture","value","passThruShader","createShaderMaterial","getPassThroughFragmentShader","mesh","addResolutionDefine","materialShader","defines","resolution","computeFragmentShader","uniforms","material","vertexShader","getPassThroughVertexShader","fragmentShader","add","setDataType","type","addVariable","variableName","initialValueTexture","variable","name","dependencies","renderTargets","wrapS","wrapT","minFilter","magFilter","push","setVariableDependencies","init","capabilities","isWebGL2","extensions","has","maxVertexTextures","i","createRenderTarget","renderTexture","d","depVar","found","compute","nextTextureIndex","il","dl","texture","doRenderTarget","getCurrentRenderTarget","getAlternateRenderTarget","sizeXTexture","sizeYTexture","renderTarget","format","depthBuffer","createTexture","Float32Array","needsUpdate","input","output","currentRenderTarget","getRenderTarget","setRenderTarget","render","SimplexNoise","r","grad3","grad4","p","random","perm","simplex","g","y","w","xin","yin","n0","n1","n2","F2","sqrt","G2","X0","Y0","x0","y0","i1","j1","x1","y1","y2","ii","jj","gi0","gi1","gi2","t0","dot","t1","t2","zin","n3","F3","G3","Z0","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","gi3","dot3","t3","F4","G4","n4","l","W0","w0","c1","c3","c4","c5","c6","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","gi4","dot4","t4","container","waterMesh","meshRay","gpuCompute","heightmapVariable","waterUniforms","waterVertexShader","heightmapFragmentShader","WIDTH","BOUNDS","mouseMoved","mouseCoords","THREE","raycaster","document","createElement","body","appendChild","window","innerWidth","innerHeight","set","lookAt","sun","sun2","setPixelRatio","devicePixelRatio","setSize","domElement","style","touchAction","addEventListener","onPointerDown","event","keyCode","wireframe","onWindowResize","effectController","mouseSize","viscosity","valuesChanger","initWater","materialColor","geometry","merge","heightmap","lights","color","specular","shininess","max","opacity","rotation","PI","matrixAutoUpdate","updateMatrix","geometryRay","visible","GPUComputationRenderer","heightmap0","fillTexture","error","console","waterMaxHeight","noise","multR","mult","pixels","image","aspect","updateProjectionMatrix","setMouseCoords","clientWidth","clientHeight","isPrimary","clientX","clientY","animate","requestAnimationFrame","setFromCamera","intersects","intersectObject","point","mounted","__exports__"],"mappings":"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","file":"js/chunk-6bee5ba0.bb4da590.js","sourcesContent":["var uncurryThis = require('../internals/function-uncurry-this');\n\n// `thisNumberValue` abstract operation\n// https://tc39.es/ecma262/#sec-thisnumbervalue\nmodule.exports = uncurryThis(1.0.valueOf);\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./WaterRipples.vue?vue&type=style&index=0&id=02b82052&scoped=true&lang=css\"","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar thisNumberValue = require('../internals/this-number-value');\nvar $repeat = require('../internals/string-repeat');\nvar fails = require('../internals/fails');\n\nvar RangeError = global.RangeError;\nvar String = global.String;\nvar floor = Math.floor;\nvar repeat = uncurryThis($repeat);\nvar stringSlice = uncurryThis(''.slice);\nvar un$ToFixed = uncurryThis(1.0.toFixed);\n\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\n\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\nvar multiply = function (data, n, c) {\n  var index = -1;\n  var c2 = c;\n  while (++index < 6) {\n    c2 += n * data[index];\n    data[index] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\n\nvar divide = function (data, n) {\n  var index = 6;\n  var c = 0;\n  while (--index >= 0) {\n    c += data[index];\n    data[index] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\n\nvar dataToString = function (data) {\n  var index = 6;\n  var s = '';\n  while (--index >= 0) {\n    if (s !== '' || index === 0 || data[index] !== 0) {\n      var t = String(data[index]);\n      s = s === '' ? t : s + repeat('0', 7 - t.length) + t;\n    }\n  } return s;\n};\n\nvar FORCED = fails(function () {\n  return un$ToFixed(0.00008, 3) !== '0.000' ||\n    un$ToFixed(0.9, 0) !== '1' ||\n    un$ToFixed(1.255, 2) !== '1.25' ||\n    un$ToFixed(1000000000000000128.0, 0) !== '1000000000000000128';\n}) || !fails(function () {\n  // V8 ~ Android 4.3-\n  un$ToFixed({});\n});\n\n// `Number.prototype.toFixed` method\n// https://tc39.es/ecma262/#sec-number.prototype.tofixed\n$({ target: 'Number', proto: true, forced: FORCED }, {\n  toFixed: function toFixed(fractionDigits) {\n    var number = thisNumberValue(this);\n    var fractDigits = toIntegerOrInfinity(fractionDigits);\n    var data = [0, 0, 0, 0, 0, 0];\n    var sign = '';\n    var result = '0';\n    var e, z, j, k;\n\n    // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation\n    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (number != number) return 'NaN';\n    if (number <= -1e21 || number >= 1e21) return String(number);\n    if (number < 0) {\n      sign = '-';\n      number = -number;\n    }\n    if (number > 1e-21) {\n      e = log(number * pow(2, 69, 1)) - 69;\n      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(data, 0, z);\n        j = fractDigits;\n        while (j >= 7) {\n          multiply(data, 1e7, 0);\n          j -= 7;\n        }\n        multiply(data, pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(data, 1 << 23);\n          j -= 23;\n        }\n        divide(data, 1 << j);\n        multiply(data, 1, 1);\n        divide(data, 2);\n        result = dataToString(data);\n      } else {\n        multiply(data, 0, z);\n        multiply(data, 1 << -e, 0);\n        result = dataToString(data) + repeat('0', fractDigits);\n      }\n    }\n    if (fractDigits > 0) {\n      k = result.length;\n      result = sign + (k <= fractDigits\n        ? '0.' + repeat('0', fractDigits - k) + result\n        : stringSlice(result, 0, k - fractDigits) + '.' + stringSlice(result, k - fractDigits));\n    } else {\n      result = sign + result;\n    } return result;\n  }\n});\n","<template>\r\n  <!-- WebGL核心概念：gl_Position和gl_FragColor的计算 -->\r\n  <!-- 即：顶点坐标的计算和片元颜色的计算，前者决定物体的形状和远近（摄像机），后者决定物体的颜色（包括光照反应） -->\r\n  <div id=\"container\"></div>\r\n</template>\r\n<script>\r\n/*eslint-disable*/\r\nimport * as THREE from \"three\";\r\nimport { GPUComputationRenderer } from \"three/examples/jsm/misc/GPUComputationRenderer\";\r\nimport { SimplexNoise } from \"three/examples/jsm/math/SimplexNoise\";\r\nimport waterVertexShader from \"../glsl/waterVertexShader\";\r\nimport heightmapFragmentShader from \"../glsl/heightmapFragmentShader\";\r\n\r\n// Texture width for simulation\r\nconst WIDTH = 128;\r\n\r\n// Water size in system units\r\nconst BOUNDS = 512;\r\n\r\nlet container;\r\nlet camera, scene, renderer;\r\nlet mouseMoved = false;\r\nconst mouseCoords = new THREE.Vector2();\r\nconst raycaster = new THREE.Raycaster();\r\n\r\nlet waterMesh;\r\nlet meshRay;\r\nlet gpuCompute;\r\nlet heightmapVariable;\r\nlet waterUniforms;\r\n\r\nconst simplex = new SimplexNoise();\r\n\r\nfunction init() {\r\n  container = document.createElement(\"div\");\r\n  document.body.appendChild(container);\r\n\r\n  camera = new THREE.PerspectiveCamera(\r\n    75,\r\n    window.innerWidth / window.innerHeight,\r\n    1,\r\n    3000\r\n  );\r\n  camera.position.set(0, 200, 350);\r\n  camera.lookAt(0, 0, 0);\r\n\r\n  scene = new THREE.Scene();\r\n\r\n  const sun = new THREE.DirectionalLight(0xffffff, 1.0);\r\n  sun.position.set(300, 400, 175);\r\n  scene.add(sun);\r\n\r\n  const sun2 = new THREE.DirectionalLight(0x40a040, 0.6);\r\n  sun2.position.set(-100, 350, -200);\r\n  scene.add(sun2);\r\n\r\n  renderer = new THREE.WebGLRenderer();\r\n  renderer.setPixelRatio(window.devicePixelRatio);\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n  container.appendChild(renderer.domElement);\r\n\r\n  container.style.touchAction = \"none\";\r\n  container.addEventListener(\"mousedown\", onPointerDown);\r\n\r\n  document.addEventListener(\"keydown\", function (event) {\r\n    // 切换是否开启网格\r\n    if (event.keyCode === 87) {\r\n      waterMesh.material.wireframe = !waterMesh.material.wireframe;\r\n      waterMesh.material.needsUpdate = true;\r\n    }\r\n  });\r\n\r\n  window.addEventListener(\"resize\", onWindowResize);\r\n\r\n  const effectController = {\r\n    mouseSize: 20.0,\r\n    viscosity: 0.98,\r\n  };\r\n\r\n  const valuesChanger = function () {\r\n    heightmapVariable.material.uniforms[\"mouseSize\"].value =\r\n      effectController.mouseSize;\r\n    heightmapVariable.material.uniforms[\"viscosityConstant\"].value =\r\n      effectController.viscosity;\r\n  };\r\n\r\n  initWater();\r\n\r\n  valuesChanger();\r\n}\r\n\r\nfunction initWater() {\r\n  const materialColor = 0x0040c0;\r\n\r\n  const geometry = new THREE.PlaneGeometry(\r\n    BOUNDS,\r\n    BOUNDS,\r\n    WIDTH - 1,\r\n    WIDTH - 1\r\n  );\r\n\r\n  // material: make a THREE.ShaderMaterial clone of THREE.MeshPhongMaterial, with customized vertex shader\r\n  const material = new THREE.ShaderMaterial({\r\n    uniforms: THREE.UniformsUtils.merge([\r\n      THREE.ShaderLib[\"phong\"].uniforms,\r\n      {\r\n        heightmap: { value: null },\r\n      },\r\n    ]),\r\n    vertexShader: waterVertexShader,\r\n    fragmentShader: THREE.ShaderChunk[\"meshphong_frag\"],\r\n  });\r\n\r\n  material.lights = true;\r\n\r\n  // Material attributes from THREE.MeshPhongMaterial\r\n  material.color = new THREE.Color(materialColor);\r\n  material.specular = new THREE.Color(0x111111);\r\n  material.shininess = 50;\r\n\r\n  // Sets the uniforms with the material values\r\n  material.uniforms[\"diffuse\"].value = material.color;\r\n  material.uniforms[\"specular\"].value = material.specular;\r\n  material.uniforms[\"shininess\"].value = Math.max(material.shininess, 1e-4);\r\n  material.uniforms[\"opacity\"].value = material.opacity;\r\n\r\n  // Defines\r\n  material.defines.WIDTH = WIDTH.toFixed(1);\r\n  material.defines.BOUNDS = BOUNDS.toFixed(1);\r\n\r\n  waterUniforms = material.uniforms;\r\n\r\n  waterMesh = new THREE.Mesh(geometry, material);\r\n  waterMesh.rotation.x = -Math.PI / 2;\r\n  waterMesh.matrixAutoUpdate = false;\r\n  waterMesh.updateMatrix();\r\n\r\n  scene.add(waterMesh);\r\n\r\n  // THREE.Mesh just for mouse raycasting\r\n  const geometryRay = new THREE.PlaneGeometry(BOUNDS, BOUNDS, 1, 1);\r\n  meshRay = new THREE.Mesh(\r\n    geometryRay,\r\n    new THREE.MeshBasicMaterial({ color: 0xffffff, visible: false })\r\n  );\r\n  meshRay.rotation.x = -Math.PI / 2;\r\n  meshRay.matrixAutoUpdate = false;\r\n  meshRay.updateMatrix();\r\n  scene.add(meshRay);\r\n\r\n  gpuCompute = new GPUComputationRenderer(WIDTH, WIDTH, renderer);\r\n\r\n  const heightmap0 = gpuCompute.createTexture();\r\n\r\n  fillTexture(heightmap0);\r\n\r\n  heightmapVariable = gpuCompute.addVariable(\r\n    \"heightmap\",\r\n    heightmapFragmentShader,\r\n    heightmap0\r\n  );\r\n\r\n  gpuCompute.setVariableDependencies(heightmapVariable, [heightmapVariable]);\r\n\r\n  heightmapVariable.material.uniforms[\"mousePos\"] = {\r\n    value: new THREE.Vector2(10000, 10000),\r\n  };\r\n  heightmapVariable.material.uniforms[\"mouseSize\"] = { value: 20.0 };\r\n  heightmapVariable.material.uniforms[\"viscosityConstant\"] = { value: 0.98 };\r\n  heightmapVariable.material.uniforms[\"heightCompensation\"] = { value: 0 };\r\n  heightmapVariable.material.defines.BOUNDS = BOUNDS.toFixed(1);\r\n\r\n  const error = gpuCompute.init();\r\n  if (error !== null) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nfunction fillTexture(texture) {\r\n  const waterMaxHeight = 10;\r\n\r\n  function noise(x, y) {\r\n    let multR = waterMaxHeight;\r\n    let mult = 0.025;\r\n    let r = 0;\r\n    for (let i = 0; i < 15; i++) {\r\n      r += multR * simplex.noise(x * mult, y * mult);\r\n      multR *= 0.53 + 0.025 * i;\r\n      mult *= 1.25;\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  const pixels = texture.image.data;\r\n\r\n  let p = 0;\r\n  for (let j = 0; j < WIDTH; j++) {\r\n    for (let i = 0; i < WIDTH; i++) {\r\n      const x = (i * 128) / WIDTH;\r\n      const y = (j * 128) / WIDTH;\r\n\r\n      pixels[p + 0] = noise(x, y);\r\n      pixels[p + 1] = pixels[p + 0];\r\n      pixels[p + 2] = 0;\r\n      pixels[p + 3] = 1;\r\n\r\n      p += 4;\r\n    }\r\n  }\r\n}\r\n\r\nfunction onWindowResize() {\r\n  camera.aspect = window.innerWidth / window.innerHeight;\r\n  camera.updateProjectionMatrix();\r\n\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nfunction setMouseCoords(x, y) {\r\n  mouseCoords.set(\r\n    (x / renderer.domElement.clientWidth) * 2 - 1,\r\n    -(y / renderer.domElement.clientHeight) * 2 + 1\r\n  );\r\n  mouseMoved = true;\r\n}\r\n\r\nfunction onPointerDown(event) {\r\n  if (event.isPrimary === false) return;\r\n\r\n  setMouseCoords(event.clientX, event.clientY);\r\n}\r\n\r\nfunction animate() {\r\n  requestAnimationFrame(animate);\r\n\r\n  render();\r\n}\r\n\r\nfunction render() {\r\n  // Set uniforms: mouse interaction\r\n  const uniforms = heightmapVariable.material.uniforms;\r\n  if (mouseMoved) {\r\n    raycaster.setFromCamera(mouseCoords, camera);\r\n\r\n    const intersects = raycaster.intersectObject(meshRay);\r\n\r\n    if (intersects.length > 0) {\r\n      const point = intersects[0].point;\r\n      uniforms[\"mousePos\"].value.set(point.x, point.z);\r\n    } else {\r\n      uniforms[\"mousePos\"].value.set(10000, 10000);\r\n    }\r\n\r\n    mouseMoved = false;\r\n  } else {\r\n    uniforms[\"mousePos\"].value.set(10000, 10000);\r\n  }\r\n\r\n  // Do the gpu computation\r\n  gpuCompute.compute();\r\n\r\n  // Get compute output in custom uniform\r\n  waterUniforms[\"heightmap\"].value =\r\n    gpuCompute.getCurrentRenderTarget(heightmapVariable).texture;\r\n\r\n  // Render\r\n  renderer.render(scene, camera);\r\n}\r\n\r\nexport default {\r\n  data() {\r\n    return {};\r\n  },\r\n  mounted() {\r\n    init();\r\n    animate();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n","import {\n\tCamera,\n\tClampToEdgeWrapping,\n\tDataTexture,\n\tFloatType,\n\tMesh,\n\tNearestFilter,\n\tPlaneGeometry,\n\tRGBAFormat,\n\tScene,\n\tShaderMaterial,\n\tWebGLRenderTarget\n} from 'three';\n\n/**\n * GPUComputationRenderer, based on SimulationRenderer by zz85\n *\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\n * for each compute element (texel)\n *\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\n *\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\n * as inputs to render the textures of the next frame.\n *\n * The render targets of the variables can be used as input textures for your visualization shaders.\n *\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\n *\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\n *\n * -------------\n *\n * Basic use:\n *\n * // Initialization...\n *\n * // Create computation renderer\n * const gpuCompute = new GPUComputationRenderer( 1024, 1024, renderer );\n *\n * // Create initial state float textures\n * const pos0 = gpuCompute.createTexture();\n * const vel0 = gpuCompute.createTexture();\n * // and fill in here the texture data...\n *\n * // Add texture variables\n * const velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\n * const posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\n *\n * // Add variable dependencies\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\n *\n * // Add custom uniforms\n * velVar.material.uniforms.time = { value: 0.0 };\n *\n * // Check for completeness\n * const error = gpuCompute.init();\n * if ( error !== null ) {\n *\t\tconsole.error( error );\n  * }\n *\n *\n * // In each frame...\n *\n * // Compute!\n * gpuCompute.compute();\n *\n * // Update texture uniforms in your visualization materials with the gpu renderer output\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\n *\n * // Do your rendering\n * renderer.render( myScene, myCamera );\n *\n * -------------\n *\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\n * Note that the shaders can have multiple input textures.\n *\n * const myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\n * const myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\n *\n * const inputTexture = gpuCompute.createTexture();\n *\n * // Fill in here inputTexture...\n *\n * myFilter1.uniforms.theTexture.value = inputTexture;\n *\n * const myRenderTarget = gpuCompute.createRenderTarget();\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\n *\n * const outputRenderTarget = gpuCompute.createRenderTarget();\n *\n * // Now use the output texture where you want:\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\n *\n * // And compute each frame, before rendering to screen:\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\n *\n *\n *\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {WebGLRenderer} renderer The renderer\n  */\n\nclass GPUComputationRenderer {\n\n\tconstructor( sizeX, sizeY, renderer ) {\n\n\t\tthis.variables = [];\n\n\t\tthis.currentTextureIndex = 0;\n\n\t\tlet dataType = FloatType;\n\n\t\tconst scene = new Scene();\n\n\t\tconst camera = new Camera();\n\t\tcamera.position.z = 1;\n\n\t\tconst passThruUniforms = {\n\t\t\tpassThruTexture: { value: null }\n\t\t};\n\n\t\tconst passThruShader = createShaderMaterial( getPassThroughFragmentShader(), passThruUniforms );\n\n\t\tconst mesh = new Mesh( new PlaneGeometry( 2, 2 ), passThruShader );\n\t\tscene.add( mesh );\n\n\n\t\tthis.setDataType = function ( type ) {\n\n\t\t\tdataType = type;\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addVariable = function ( variableName, computeFragmentShader, initialValueTexture ) {\n\n\t\t\tconst material = this.createShaderMaterial( computeFragmentShader );\n\n\t\t\tconst variable = {\n\t\t\t\tname: variableName,\n\t\t\t\tinitialValueTexture: initialValueTexture,\n\t\t\t\tmaterial: material,\n\t\t\t\tdependencies: null,\n\t\t\t\trenderTargets: [],\n\t\t\t\twrapS: null,\n\t\t\t\twrapT: null,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tmagFilter: NearestFilter\n\t\t\t};\n\n\t\t\tthis.variables.push( variable );\n\n\t\t\treturn variable;\n\n\t\t};\n\n\t\tthis.setVariableDependencies = function ( variable, dependencies ) {\n\n\t\t\tvariable.dependencies = dependencies;\n\n\t\t};\n\n\t\tthis.init = function () {\n\n\t\t\tif ( renderer.capabilities.isWebGL2 === false && renderer.extensions.has( 'OES_texture_float' ) === false ) {\n\n\t\t\t\treturn 'No OES_texture_float support for float textures.';\n\n\t\t\t}\n\n\t\t\tif ( renderer.capabilities.maxVertexTextures === 0 ) {\n\n\t\t\t\treturn 'No support for vertex shader textures.';\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < this.variables.length; i ++ ) {\n\n\t\t\t\tconst variable = this.variables[ i ];\n\n\t\t\t\t// Creates rendertargets and initialize them with input texture\n\t\t\t\tvariable.renderTargets[ 0 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\t\tvariable.renderTargets[ 1 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 0 ] );\n\t\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 1 ] );\n\n\t\t\t\t// Adds dependencies uniforms to the ShaderMaterial\n\t\t\t\tconst material = variable.material;\n\t\t\t\tconst uniforms = material.uniforms;\n\n\t\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\t\tfor ( let d = 0; d < variable.dependencies.length; d ++ ) {\n\n\t\t\t\t\t\tconst depVar = variable.dependencies[ d ];\n\n\t\t\t\t\t\tif ( depVar.name !== variable.name ) {\n\n\t\t\t\t\t\t\t// Checks if variable exists\n\t\t\t\t\t\t\tlet found = false;\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < this.variables.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tif ( depVar.name === this.variables[ j ].name ) {\n\n\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( ! found ) {\n\n\t\t\t\t\t\t\t\treturn 'Variable dependency not found. Variable=' + variable.name + ', dependency=' + depVar.name;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuniforms[ depVar.name ] = { value: null };\n\n\t\t\t\t\t\tmaterial.fragmentShader = '\\nuniform sampler2D ' + depVar.name + ';\\n' + material.fragmentShader;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.currentTextureIndex = 0;\n\n\t\t\treturn null;\n\n\t\t};\n\n\t\tthis.compute = function () {\n\n\t\t\tconst currentTextureIndex = this.currentTextureIndex;\n\t\t\tconst nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\n\n\t\t\tfor ( let i = 0, il = this.variables.length; i < il; i ++ ) {\n\n\t\t\t\tconst variable = this.variables[ i ];\n\n\t\t\t\t// Sets texture dependencies uniforms\n\t\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\t\tconst uniforms = variable.material.uniforms;\n\n\t\t\t\t\tfor ( let d = 0, dl = variable.dependencies.length; d < dl; d ++ ) {\n\n\t\t\t\t\t\tconst depVar = variable.dependencies[ d ];\n\n\t\t\t\t\t\tuniforms[ depVar.name ].value = depVar.renderTargets[ currentTextureIndex ].texture;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Performs the computation for this variable\n\t\t\t\tthis.doRenderTarget( variable.material, variable.renderTargets[ nextTextureIndex ] );\n\n\t\t\t}\n\n\t\t\tthis.currentTextureIndex = nextTextureIndex;\n\n\t\t};\n\n\t\tthis.getCurrentRenderTarget = function ( variable ) {\n\n\t\t\treturn variable.renderTargets[ this.currentTextureIndex ];\n\n\t\t};\n\n\t\tthis.getAlternateRenderTarget = function ( variable ) {\n\n\t\t\treturn variable.renderTargets[ this.currentTextureIndex === 0 ? 1 : 0 ];\n\n\t\t};\n\n\t\tfunction addResolutionDefine( materialShader ) {\n\n\t\t\tmaterialShader.defines.resolution = 'vec2( ' + sizeX.toFixed( 1 ) + ', ' + sizeY.toFixed( 1 ) + ' )';\n\n\t\t}\n\n\t\tthis.addResolutionDefine = addResolutionDefine;\n\n\n\t\t// The following functions can be used to compute things manually\n\n\t\tfunction createShaderMaterial( computeFragmentShader, uniforms ) {\n\n\t\t\tuniforms = uniforms || {};\n\n\t\t\tconst material = new ShaderMaterial( {\n\t\t\t\tuniforms: uniforms,\n\t\t\t\tvertexShader: getPassThroughVertexShader(),\n\t\t\t\tfragmentShader: computeFragmentShader\n\t\t\t} );\n\n\t\t\taddResolutionDefine( material );\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tthis.createShaderMaterial = createShaderMaterial;\n\n\t\tthis.createRenderTarget = function ( sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter ) {\n\n\t\t\tsizeXTexture = sizeXTexture || sizeX;\n\t\t\tsizeYTexture = sizeYTexture || sizeY;\n\n\t\t\twrapS = wrapS || ClampToEdgeWrapping;\n\t\t\twrapT = wrapT || ClampToEdgeWrapping;\n\n\t\t\tminFilter = minFilter || NearestFilter;\n\t\t\tmagFilter = magFilter || NearestFilter;\n\n\t\t\tconst renderTarget = new WebGLRenderTarget( sizeXTexture, sizeYTexture, {\n\t\t\t\twrapS: wrapS,\n\t\t\t\twrapT: wrapT,\n\t\t\t\tminFilter: minFilter,\n\t\t\t\tmagFilter: magFilter,\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\ttype: dataType,\n\t\t\t\tdepthBuffer: false\n\t\t\t} );\n\n\t\t\treturn renderTarget;\n\n\t\t};\n\n\t\tthis.createTexture = function () {\n\n\t\t\tconst data = new Float32Array( sizeX * sizeY * 4 );\n\t\t\tconst texture = new DataTexture( data, sizeX, sizeY, RGBAFormat, FloatType );\n\t\t\ttexture.needsUpdate = true;\n\t\t\treturn texture;\n\n\t\t};\n\n\t\tthis.renderTexture = function ( input, output ) {\n\n\t\t\t// Takes a texture, and render out in rendertarget\n\t\t\t// input = Texture\n\t\t\t// output = RenderTarget\n\n\t\t\tpassThruUniforms.passThruTexture.value = input;\n\n\t\t\tthis.doRenderTarget( passThruShader, output );\n\n\t\t\tpassThruUniforms.passThruTexture.value = null;\n\n\t\t};\n\n\t\tthis.doRenderTarget = function ( material, output ) {\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tmesh.material = material;\n\t\t\trenderer.setRenderTarget( output );\n\t\t\trenderer.render( scene, camera );\n\t\t\tmesh.material = passThruShader;\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t\t// Shaders\n\n\t\tfunction getPassThroughVertexShader() {\n\n\t\t\treturn\t'void main()\t{\\n' +\n\t\t\t\t\t'\\n' +\n\t\t\t\t\t'\tgl_Position = vec4( position, 1.0 );\\n' +\n\t\t\t\t\t'\\n' +\n\t\t\t\t\t'}\\n';\n\n\t\t}\n\n\t\tfunction getPassThroughFragmentShader() {\n\n\t\t\treturn\t'uniform sampler2D passThruTexture;\\n' +\n\t\t\t\t\t'\\n' +\n\t\t\t\t\t'void main() {\\n' +\n\t\t\t\t\t'\\n' +\n\t\t\t\t\t'\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n' +\n\t\t\t\t\t'\\n' +\n\t\t\t\t\t'\tgl_FragColor = texture2D( passThruTexture, uv );\\n' +\n\t\t\t\t\t'\\n' +\n\t\t\t\t\t'}\\n';\n\n\t\t}\n\n\t}\n\n}\n\nexport { GPUComputationRenderer };\n","// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nclass SimplexNoise {\n\n\tconstructor( r = Math ) {\n\n\t\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\t\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t\t\t[ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t\t\t[ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t\t\t[ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t\t\t[ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t\t\t[ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t\t\t[ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t\t\t[ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\t\tthis.p = [];\n\n\t\tfor ( let i = 0; i < 256; i ++ ) {\n\n\t\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t\t}\n\n\t\t// To remove the need for index wrapping, double the permutation table length\n\t\tthis.perm = [];\n\n\t\tfor ( let i = 0; i < 512; i ++ ) {\n\n\t\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t\t}\n\n\t\t// A lookup table to traverse the simplex around a given point in 4D.\n\t\t// Details can be found where this table is used, in the 4D noise method.\n\t\tthis.simplex = [\n\t\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n\t}\n\n\tdot( g, x, y ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n\t}\n\n\tdot3( g, x, y, z ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n\t}\n\n\tdot4( g, x, y, z, w ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n\t}\n\n\tnoise( xin, yin ) {\n\n\t\tlet n0; // Noise contributions from the three corners\n\t\tlet n1;\n\t\tlet n2;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\t\tconst s = ( xin + yin ) * F2; // Hairy factor for 2D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\t\tconst t = ( i + j ) * G2;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y) space\n\t\tconst Y0 = j - t;\n\t\tconst x0 = xin - X0; // The x,y distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\n\t\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n\t\tlet j1;\n\t\tif ( x0 > y0 ) {\n\n\t\t\ti1 = 1; j1 = 0;\n\n\t\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t\t}\telse {\n\n\t\t\ti1 = 0; j1 = 1;\n\n\t\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t\t// c = (3-sqrt(3))/6\n\t\tconst x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\t\tconst y1 = y0 - j1 + G2;\n\t\tconst x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\t\tconst y2 = y0 - 1.0 + 2.0 * G2;\n\t\t// Work out the hashed gradient indices of the three simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t\t// Calculate the contribution from the three corners\n\t\tlet t0 = 0.5 - x0 * x0 - y0 * y0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t\t}\n\n\t\tlet t1 = 0.5 - x1 * x1 - y1 * y1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t\t}\n\n\t\tlet t2 = 0.5 - x2 * x2 - y2 * y2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to return values in the interval [-1,1].\n\t\treturn 70.0 * ( n0 + n1 + n2 );\n\n\t}\n\n\t// 3D simplex noise\n\tnoise3d( xin, yin, zin ) {\n\n\t\tlet n0; // Noise contributions from the four corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F3 = 1.0 / 3.0;\n\t\tconst s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst k = Math.floor( zin + s );\n\t\tconst G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\t\tconst t = ( i + j + k ) * G3;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst x0 = xin - X0; // The x,y,z distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\t\tconst z0 = zin - Z0;\n\n\t\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second corner of simplex in (i,j,k) coords\n\n\t\tlet j1;\n\t\tlet k1;\n\t\tlet i2; // Offsets for third corner of simplex in (i,j,k) coords\n\t\tlet j2;\n\t\tlet k2;\n\t\tif ( x0 >= y0 ) {\n\n\t\t\tif ( y0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t\t// X Y Z order\n\n\t\t\t} else if ( x0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t\t// X Z Y order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t} // Z X Y order\n\n\t\t} else { // x0<y0\n\n\t\t\tif ( y0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Z Y X order\n\n\t\t\t} else if ( x0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Y Z X order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t} // Y X Z order\n\n\t\t}\n\n\t\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t\t// c = 1/6.\n\t\tconst x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\t\tconst y1 = y0 - j1 + G3;\n\t\tconst z1 = z0 - k1 + G3;\n\t\tconst x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G3;\n\t\tconst z2 = z0 - k2 + 2.0 * G3;\n\t\tconst x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\t\tconst y3 = y0 - 1.0 + 3.0 * G3;\n\t\tconst z3 = z0 - 1.0 + 3.0 * G3;\n\t\t// Work out the hashed gradient indices of the four simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\t\tconst gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t\t// Calculate the contribution from the four corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to stay just inside [-1,1]\n\t\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n\t}\n\n\t// 4D simplex noise\n\tnoise4d( x, y, z, w ) {\n\n\t\t// For faster and easier lookups\n\t\tconst grad4 = this.grad4;\n\t\tconst simplex = this.simplex;\n\t\tconst perm = this.perm;\n\n\t\t// The skewing and unskewing factors are hairy again for the 4D case\n\t\tconst F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\t\tconst G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\t\tlet n0; // Noise contributions from the five corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\tlet n4;\n\t\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\t\tconst s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\t\tconst i = Math.floor( x + s );\n\t\tconst j = Math.floor( y + s );\n\t\tconst k = Math.floor( z + s );\n\t\tconst l = Math.floor( w + s );\n\t\tconst t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst W0 = l - t;\n\t\tconst x0 = x - X0; // The x,y,z,w distances from the cell origin\n\t\tconst y0 = y - Y0;\n\t\tconst z0 = z - Z0;\n\t\tconst w0 = w - W0;\n\n\t\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t\t// To find out which of the 24 possible simplices we're in, we need to\n\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t\t// then find the correct traversal order for the simplex we’re in.\n\t\t// First, six pair-wise comparisons are performed between each possible pair\n\t\t// of the four coordinates, and the results are used to add up binary bits\n\t\t// for an integer index.\n\t\tconst c1 = ( x0 > y0 ) ? 32 : 0;\n\t\tconst c2 = ( x0 > z0 ) ? 16 : 0;\n\t\tconst c3 = ( y0 > z0 ) ? 8 : 0;\n\t\tconst c4 = ( x0 > w0 ) ? 4 : 0;\n\t\tconst c5 = ( y0 > w0 ) ? 2 : 0;\n\t\tconst c6 = ( z0 > w0 ) ? 1 : 0;\n\t\tconst c = c1 + c2 + c3 + c4 + c5 + c6;\n\n\t\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\t\tconst i1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\t\tconst j1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\t\tconst k1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\t\tconst l1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\t\tconst i2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\t\tconst j2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0;\n\t\tconst k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\t\tconst l2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\t\tconst i3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\t\tconst j3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\t\tconst k3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\t\tconst l3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\t\tconst x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\t\tconst y1 = y0 - j1 + G4;\n\t\tconst z1 = z0 - k1 + G4;\n\t\tconst w1 = w0 - l1 + G4;\n\t\tconst x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G4;\n\t\tconst z2 = z0 - k2 + 2.0 * G4;\n\t\tconst w2 = w0 - l2 + 2.0 * G4;\n\t\tconst x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\t\tconst y3 = y0 - j3 + 3.0 * G4;\n\t\tconst z3 = z0 - k3 + 3.0 * G4;\n\t\tconst w3 = w0 - l3 + 3.0 * G4;\n\t\tconst x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\t\tconst y4 = y0 - 1.0 + 4.0 * G4;\n\t\tconst z4 = z0 - 1.0 + 4.0 * G4;\n\t\tconst w4 = w0 - 1.0 + 4.0 * G4;\n\t\t// Work out the hashed gradient indices of the five simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst ll = l & 255;\n\t\tconst gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\t\tconst gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\t\tconst gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\t\tconst gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\t\tconst gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t\t// Calculate the contribution from the five corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t\t}\n\n\t\tlet t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\t\tif ( t4 < 0 ) n4 = 0.0;\n\t\telse {\n\n\t\t\tt4 *= t4;\n\t\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t\t}\n\n\t\t// Sum up and scale the result to cover the range [-1,1]\n\t\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n\t}\n\n}\n\nexport { SimplexNoise };\n","const waterVertexShader = `\r\nuniform sampler2D heightmap;\r\n#define PHONG\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n  varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n  vec2 cellSize = vec2( 1.0 / WIDTH, 1.0 / WIDTH );\r\n\r\n  #include <uv_vertex>\r\n  #include <uv2_vertex>\r\n  #include <color_vertex>\r\n\r\n  // # include <beginnormal_vertex>\r\n  // Compute normal from heightmap\r\n  vec3 objectNormal = vec3(\r\n    ( texture2D( heightmap, uv + vec2( - cellSize.x, 0 ) ).x - texture2D( heightmap, uv + vec2( cellSize.x, 0 ) ).x ) * WIDTH / BOUNDS,\r\n    ( texture2D( heightmap, uv + vec2( 0, - cellSize.y ) ).x - texture2D( heightmap, uv + vec2( 0, cellSize.y ) ).x ) * WIDTH / BOUNDS,\r\n    1.0 );\r\n  //<beginnormal_vertex>\r\n\r\n  #include <morphnormal_vertex>\r\n  #include <skinbase_vertex>\r\n  #include <skinnormal_vertex>\r\n  #include <defaultnormal_vertex>\r\n\r\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\r\n  vNormal = normalize( transformedNormal );\r\n\r\n#endif\r\n\r\n  //# include <begin_vertex>\r\n  float heightValue = texture2D( heightmap, uv ).x;\r\n  vec3 transformed = vec3( position.x, position.y, heightValue );\r\n  //<begin_vertex>\r\n\r\n  #include <morphtarget_vertex>\r\n  #include <skinning_vertex>\r\n  #include <displacementmap_vertex>\r\n  #include <project_vertex>\r\n  #include <logdepthbuf_vertex>\r\n  #include <clipping_planes_vertex>\r\n\r\n  vViewPosition = - mvPosition.xyz;\r\n\r\n  #include <worldpos_vertex>\r\n  #include <envmap_vertex>\r\n  #include <shadowmap_vertex>\r\n\r\n}\r\n`;\r\n\r\nexport default waterVertexShader;\r\n","const heightmapFragmentShader = `\r\n#include <common>\r\nuniform vec2 mousePos;\r\nuniform float mouseSize;\r\nuniform float viscosityConstant;\r\nuniform float heightCompensation;\r\n\r\nvoid main()\t{\r\n\r\n  vec2 cellSize = 1.0 / resolution.xy;\r\n\r\n  vec2 uv = gl_FragCoord.xy * cellSize;\r\n\r\n  // heightmapValue.x == height from previous frame\r\n  // heightmapValue.y == height from penultimate frame\r\n  // heightmapValue.z, heightmapValue.w not used\r\n  vec4 heightmapValue = texture2D( heightmap, uv );\r\n\r\n  // Get neighbours\r\n  vec4 north = texture2D( heightmap, uv + vec2( 0.0, cellSize.y ) );\r\n  vec4 south = texture2D( heightmap, uv + vec2( 0.0, - cellSize.y ) );\r\n  vec4 east = texture2D( heightmap, uv + vec2( cellSize.x, 0.0 ) );\r\n  vec4 west = texture2D( heightmap, uv + vec2( - cellSize.x, 0.0 ) );\r\n\r\n  // https://web.archive.org/web/20080618181901/http://freespace.virgin.net/hugo.elias/graphics/x_water.htm\r\n\r\n  float newHeight = ( ( north.x + south.x + east.x + west.x ) * 0.5 - heightmapValue.y ) * viscosityConstant;\r\n\r\n  // Mouse influence\r\n  float mousePhase = clamp( length( ( uv - vec2( 0.5 ) ) * BOUNDS - vec2( mousePos.x, - mousePos.y ) ) * PI / mouseSize, 0.0, PI );\r\n  newHeight += ( cos( mousePhase ) + 1.0 ) * 0.28;\r\n\r\n  heightmapValue.y = heightmapValue.x;\r\n  heightmapValue.x = newHeight;\r\n\r\n  gl_FragColor = heightmapValue;\r\n\r\n}\r\n`;\r\nexport default heightmapFragmentShader;\r\n","import { render } from \"./WaterRipples.vue?vue&type=template&id=02b82052&scoped=true\"\nimport script from \"./WaterRipples.vue?vue&type=script&lang=js\"\nexport * from \"./WaterRipples.vue?vue&type=script&lang=js\"\n\nimport \"./WaterRipples.vue?vue&type=style&index=0&id=02b82052&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\github\\\\jeriming-home-page\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-02b82052\"]])\n\nexport default __exports__"],"sourceRoot":""}